<h3>Notes from Design Patterns in Ruby:</h3>

<ol>
  <li>The Template Method Pattern:</li>
  <ol>
    <li>Create an abstract class with a skeletal method (output_report in example)</li>
    <ol>
      class Report<br />
      &nbsp;&nbsp;def initialize<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@title = 'Monthly Report'<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@text = ['Things are going','really well.']<br /> 
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_report #Template method<br />
      &nbsp;&nbsp;&nbsp;&nbsp;output_start<br />
      &nbsp;&nbsp;&nbsp;&nbsp;output_head<br />
      &nbsp;&nbsp;&nbsp;&nbsp;output_body_start<br />
      &nbsp;&nbsp;&nbsp;&nbsp;output_body<br />
      &nbsp;&nbsp;&nbsp;&nbsp;output_body_end<br />
      &nbsp;&nbsp;&nbsp;&nbsp;output_end<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_start<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Called abstract method: output_start'<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_head<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Called abstract method: output_head'<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_body_start<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Called abstract method: output_body_start'<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_body<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@text.each do |line|<br />
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output_line(line)<br />
      &nbsp;&nbsp;&nbsp;&nbsp;end<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_line<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Called abstract method: output_line'<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_body_end<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Called abstract method: output_body_end'<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_end<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Called abstract method: output_end'<br />
      &nbsp;&nbsp;end<br /> 
    </ol>
    <li>Create sublclasses that call abstract class methods</li>
    <ol>
      class HTMLReport < Report<br />
      &nbsp;&nbsp;def output_start<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts('< html>')<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_head<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(' < head>')<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(" < title>#{@title}< / title>")<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(' < / head>')<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_body_start<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts('< body>')<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_line(line)<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(" < p>#{line}< / p>")<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_body_end<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts('< / body>')<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_end<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts('< / html>')<br />
      &nbsp;&nbsp;end<br />
      end
    </ol>
    <li>Notice how the template method (output_report) is NOT defined in 
        subclass - that's the abstraction of the static portion</li>
    <li>To use:</li>
    <ol>
      report = HTMLReport.new<br />
      report.output_report<br />
      # or, another example would be:<br />
      report = PlainTextReport.new<br />
      report.output_report<br />
    </ol>
    <li>The worst mistake you can make is to overdo things
      in an effort to cover every conceivable possibility. The Template Method pattern is at
      its best when it is at its leanest—that is, when every abstract method and hook is there
      for a reason. Try to avoid creating a template class that requires each subclass to override
      a huge number of obscure methods just to cover every conceivable possibility. You
      also do not want to create a template class that is encrusted with a multitude of hook
      methods that no one will ever override.</li>
  </ol>
  <li>The Strategy Pattern:</li>
  <ol>
    <li>Pull the algorithm out into a separate object.  Define a family of 
        strategy objects that all do the same thing.</li>
    <ol>
      class Formatter<br />
      &nbsp;&nbsp;def output_report( title, text )<br />
      &nbsp;&nbsp;&nbsp;&nbsp;raise 'Abstract method called'<br />
      &nbsp;&nbsp;end<br />
      end<br />
      class HTMLFormatter < Formatter<br />
      &nbsp;&nbsp;def output_report( title, text )<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts('< html>')<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(' < head>')<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(" < title>#{title}< / title>")<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(' < / head>')<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(' < body>')<br />
      &nbsp;&nbsp;&nbsp;&nbsp;text.each do |line|<br />
      &nbsp;&nbsp;&nbsp;&nbsp;puts(" < p>#{line}< / p>" )<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;puts(' < / body>')<br />
      &nbsp;&nbsp;puts('< / html>')<br />
      end<br />
      class Report<br />
      &nbsp;&nbsp;attr_reader :title, :text<br />
      &nbsp;&nbsp;attr_accessor :formatter<br />
      &nbsp;&nbsp;def initialize(formatter)<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@title = 'Monthly Report'<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@text = [ 'Things are going', 'really, really well.' ]<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@formatter = formatter<br />
      &nbsp;&nbsp;end<br />
      &nbsp;&nbsp;def output_report<br />
      &nbsp;&nbsp;&nbsp;&nbsp;@formatter.output_report( @title, @text )<br />
      &nbsp;&nbsp;end<br />
      end<br />
    </ol>
    <li>Each strategy would inherit from the abstract class</li>
    <li>A more ruby way to do this would be to use procs and blocks (p.84):</li>
    <ol>
      <li>This is a bit confusing but basically you can define procs (strategies) 
        on-the-fly and pass them into the report object.  This works if the strategy 
        has only one method inside.</li>
      <li>This allows us to dump the abstract class so all that's needed is strategies (formatters) and context (report)</li>
      <ol>
        class Report<br />
        &nbsp;&nbsp;attr_reader :title, :text<br />
        &nbsp;&nbsp;attr_accessor :formatter<br />
        &nbsp;&nbsp;def initialize(&formatter)<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@title = 'Monthly Report'<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@text = [ 'Things are going', 'really, really well.' ]<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@formatter = formatter<br />
        &nbsp;&nbsp;end<br />
        &nbsp;&nbsp;def output_report<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@formatter.call( self )<br />
        &nbsp;&nbsp;end<br />
        end<br />
        HTML_FORMATTER = lambda do |context|<br />
        &nbsp;&nbsp;puts('< html>')<br />
        &nbsp;&nbsp;puts(' < head>')<br />
        &nbsp;&nbsp;puts(" < title>#{context.title}< / title>")<br />
        &nbsp;&nbsp;puts(' < / head>')<br />
        &nbsp;&nbsp;puts(' < body>')<br />
        &nbsp;&nbsp;context.text.each do |line|<br />
        &nbsp;&nbsp;&nbsp;&nbsp;puts(" < p>#{line}< / p>" )<br />
        &nbsp;&nbsp;end<br />
        &nbsp;&nbsp;puts(' < / body>')<br />
        &nbsp;&nbsp;puts('< / html>')<br />
        end
      </ol>
      <li>Calling this requires 2 lines:</li>
      <ol><pre>
        report = Report.new &HTML_FORMATTER
        report.output_report</pre>
      </ol>
      <li>You could also do the formatter on the fly (text example):</li>
      <ol>
        report = Report.new do |context|<br />
        &nbsp;&nbsp;puts("****** #{context.title} ******")<br />
        &nbsp;&nbsp;context.text.each do |line|<br />
        &nbsp;&nbsp;&nbsp;&nbsp;puts(line)<br />
        &nbsp;&nbsp;end<br />
        end<br />
      </ol>
    </ol>
  </ol>
  <li>The Observer Pattern</li>
  <ol>
    <li>To observe changes in important objects we can user an observer pattern:</li>
    <ol>
      <li>Subject:  The object that is the source of news.</li>
      <li>Observer: The consumer of news.</li>
    </ol>
    <li>Example:</li>
    <ol>
      <li>Subject: Employee (object)</li>
      <li>Observer 1: Payroll (object)</li>
      <li>Observer 2: Taxman (object)</li>
      <li>Implementation 1: The inheritance way</li>
      <ol>
        <li>Create a Subject base class:</li>
        <ol>
          class Subject<br />
          &nbsp;&nbsp;def initialize<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@observers=[]<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def add_observer(observer)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@observers << observer<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def delete_observer(observer)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@observers.delete(observer)<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def notify_observers<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@observers.each do |observer|<br />
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.update(self)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;end<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>News source object Employee inherits from Subject class:</li>
        <ol>
          class Employee < Subject<br />
          &nbsp;&nbsp;attr_reader :name, :address<br />
          &nbsp;&nbsp;attr_reader :salary<br />
          &nbsp;&nbsp;def initialize( name, title, salary)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;super()<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@name = name<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@title = title<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@salary = salary<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def salary=(new_salary)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@salary = new_salary<br />
          &nbsp;&nbsp;&nbsp;&nbsp;notify_observers<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>So, let's try it out.  Given two objects (over-simplified):</li>
        <ol>
          class Payroll<br />
          &nbsp;&nbsp;def update( changed_employee )<br />
          &nbsp;&nbsp;&nbsp;&nbsp;puts("Cut a new check for #{changed_employee.name}!")<br />
          &nbsp;&nbsp;&nbsp;&nbsp;puts("His salary is now #{changed_employee.salary}!")<br />
          &nbsp;&nbsp;end<br />
          end<br />
          class TaxMan<br />
          &nbsp;&nbsp;def update( changed_employee )<br />
          &nbsp;&nbsp;&nbsp;&nbsp;puts("Send #{changed_employee.name} a new tax bill!")<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Then using the subject/context method becomes:</li>
        <ol>
          fred = Employee.new('Fred', 'Crane Operator', 30000.0)<br />
          payroll = Payroll.new<br />
          tax_man = TaxMan.new<br />
          fred.add_observer( payroll )<br />
          fred.add_observer( tax_man )<br />
          fred.salary = 40000.0<br />
        </ol>
        <li>And the output:</li>
        <ol>
          Cut a new check for Fred!
          His salary is now 40000.0!
          Send Fred a new tax bill!
        </ol>
      </ol>
      <li>Implementation 2:  The Java-like Ruby way</li>
      <ol>
        <li>Replace the subject class with an include of the ruby library's Observer module:</li>
        <ol>
          require 'observer'<br /><br />
          class Employee<br />
          &nbsp;&nbsp;include Observable<br />
          &nbsp;&nbsp;attr_reader :name, :address<br />
          &nbsp;&nbsp;attr_reader :salary<br />
          &nbsp;&nbsp;def initialize( name, title, salary)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@name = name<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@title = title<br />
          &nbsp;&nbsp;@salary = salary<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def salary=(new_salary)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@salary = new_salary<br />
          &nbsp;&nbsp;&nbsp;&nbsp;changed<br />
          &nbsp;&nbsp;&nbsp;&nbsp;notify_observers(self)<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Notice the call to method "changed".  The observer model requires this assertion
            to prevent un-necessary messages.</li>
      </ol>
      <li>Implementation 3: The Ruby code-block way</li>
      <ol>
        <li>Define subject as module and include observer code block as parameter to add_observer:</li>
        <ol>
          module Subject<br />
            &nbsp;&nbsp;def initialize<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@observers=[]<br />
            &nbsp;&nbsp;end<br />
            &nbsp;&nbsp;def add_observer(&observer)<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@observers << observer<br />
            &nbsp;&nbsp;end<br />
            &nbsp;&nbsp;def delete_observer(observer)<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@observers.delete(observer)<br />
            &nbsp;&nbsp;end<br />
            &nbsp;&nbsp;def notify_observers<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@observers.each do |observer|<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observer.call(self)<br />
            &nbsp;&nbsp;&nbsp;&nbsp;end<br />
            &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>The source (employee) is straight forward but with a "super()" call in the initialize method:</li>
        <ol>
          class Employee<br />
            &nbsp;&nbsp;include Subject<br />
            &nbsp;&nbsp;attr_accessor :name, :title, :salary<br />
            &nbsp;&nbsp;def initialize( name, title, salary )<br />
            &nbsp;&nbsp;&nbsp;&nbsp;super()<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@name = name<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@title = title<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@salary = salary<br />
            &nbsp;&nbsp;end<br />
            &nbsp;&nbsp;def salary=(new_salary)<br />
            &nbsp;&nbsp;&nbsp;&nbsp;@salary = new_salary<br />
            &nbsp;&nbsp;&nbsp;&nbsp;notify_observers<br />
            &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>The advantage of this implementation is that we don't need to pre-define observers.  Instead:</li>
          fred = Employee.new('Fred', 'Crane Operator', 30000)<br />
          fred.add_observer do |changed_employee|<br />
            &nbsp;&nbsp;puts(“Cut a new check for #{changed_employee.name}!”)<br />
            &nbsp;&nbsp;puts(“His salary is now #{changed_employee.salary}!”)<br />
          end<br />
      </ol>
    </ol>
  </ol>
  <li>The Composite Pattern (p. 111)</li>
  <ol>
    <li>A tree of objects where some behaviour of the top node (or sum of all components)
    is reflected in each node.</li>
    <li>Each branch can be treated as a single node where the modeled behaviour is concerned.</li>
    <li>Requirements:</li>
    <ol>
      <li>Sum:  The top of the hierarchy.</li>
      <li>Behaviour(s):  The patterned quality or action that is repeated throughout.</li>
      <li>Component:  Common Base Class</li>
      <li>Leaf:  Indivisible parts</li>
      <li>Composite:  Base class modelling components with child components.</li>
    </ol>
    <li>Example: Making a cake at a cake manufacturer.</li>
    <ol>
      <li>Sum:  Making a cake</li>
      <li>Behaviour:  Time required</li>
      <li>Component:  Task (class defined below)</li>
      <li>Leaf:  Pre-measured cake ingredients and base actions (such as setting oven temp.)</li>
      <li>Composite:  All non-leaf tasks (class defined below)</li>
      <li>First Implementation:</li>
      <ol>
        <li>Task:</li>
        <ol>
          class Task<br />
          &nbsp;&nbsp;attr_reader :name<br />
          &nbsp;&nbsp;def initialize(name)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@name = name<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def get_time_required<br />
          &nbsp;&nbsp;&nbsp;&nbsp;0.0<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Composite:</li>
        <ol>
          class CompositeTask < Task<br />
          &nbsp;&nbsp;def initialize(name)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;super(name)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks = []<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def add_sub_task(task)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks << task<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def remove_sub_task(task)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks.delete(task)<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def get_time_required<br />
          &nbsp;&nbsp;&nbsp;&nbsp;time=0.0<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks.each {|task| time += task.get_time_required}<br />
          &nbsp;&nbsp;&nbsp;&nbsp;time<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Example Task:</li>
        <ol>
          class AddDryIngredientsTask < Task<br />
          &nbsp;&nbsp;def initialize<br />
          &nbsp;&nbsp;&nbsp;&nbsp;super('Add dry ingredients')<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def get_time_required<br />
          &nbsp;&nbsp;&nbsp;&nbsp;1.0   # 1 minute to add flour and sugar<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Example Composite:</li>
        <ol>
          class MakeBatterTask < CompositeTask<br />
          &nbsp;&nbsp;def initialize<br />
          &nbsp;&nbsp;&nbsp;&nbsp;super('Make batter')<br />
          &nbsp;&nbsp;&nbsp;&nbsp;add_sub_task( AddDryIngredientsTask.new )<br />
          &nbsp;&nbsp;&nbsp;&nbsp;add_sub_task( AddLiquidsTask.new )<br />
          &nbsp;&nbsp;&nbsp;&nbsp;add_sub_task( MixTask.new )<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
      </ol>
      <li>Second Implementation (with operators and parent reference):</li>
      <ol>
        <li>Task:  (add parent reference to allow travel up the tree)</li>
        <ol>
          class Task<br />
          &nbsp;&nbsp;attr_accessor :name, :parent<br />
          &nbsp;&nbsp;def initialize(name)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@name = name<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@parent = nil<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def get_time_required<br />
          &nbsp;&nbsp;&nbsp;&nbsp;0.0<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Composite: (add parent ref. create/delete and replace add_sub_tesk method name with << and add index operators to access sub-tasks by index)</li>
        <ol>
          class CompositeTask < Task<br />
          &nbsp;&nbsp;def initialize(name)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;super(name)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks = []<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def <<(task)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks << task<br />
          &nbsp;&nbsp;&nbsp;&nbsp;task.parent = self<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def remove_sub_task(task)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks.delete(task)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;task.parent = nil<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def [](index)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks[index]<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def []=(index, new_value)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks[index] = new_value<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def get_time_required<br />
          &nbsp;&nbsp;&nbsp;&nbsp;time=0.0<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@sub_tasks.each {|task| time += task.get_time_required}<br />
          &nbsp;&nbsp;&nbsp;&nbsp;time<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Examples using composites with operators:</li>
        <ol>
          composite = CompositeTask.new('example')<br />
          composite << MakeBatterTask.new<br />
          puts(composite[0].get_time_required)<br />
          composite[1] = AddDryIngredientsTask.new<br />
        </ol>
        <li>Example traveling up the tree:</li>
        <ol>
          while task<br />
          &nbsp;&nbsp;puts("task: #{task}")<br />
          &nbsp;&nbsp;task = task.parent<br />
          end<br />
        </ol>
      </ol>
    </ol>
  </ol>
  <li>The Iterator Pattern (p.127)</li>
  <ol>
    <li>Sequentially accessing a collection.</li>
    <li>Two types of iterators:</li>
    <ol>
      <li>External:</li>
      <ol>
        <li>Not as commonly used in Ruby.</li>
        <li>Advantage: the client controls the iteration (a client driven merge sort was given as an example)</li>
        <li>An external iterator similar to the java version (java.util.iterator) 
            could be defined as:</li>
        <ol>
          class ArrayIterator<br />
          &nbsp;&nbsp;def initialize(array)<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@array = array<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@index = 0<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def has_next?<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@index < @array.length<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def item<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@array[@index]<br />
          &nbsp;&nbsp;end<br />
          &nbsp;&nbsp;def next_item<br />
          &nbsp;&nbsp;&nbsp;&nbsp;value = @array[@index]<br />
          &nbsp;&nbsp;&nbsp;&nbsp;@index += 1<br />
          &nbsp;&nbsp;&nbsp;&nbsp;value<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Example using this iterator:</li>
        <ol>
          array = ['red', 'green', 'blue']<br /><br />
          i = ArrayIterator.new(array)<br />
          while i.has_next?<br />
          &nbsp;&nbsp;puts("item: #{i.next_item}")<br />
          end<br />
        </ol>
      </ol>
      <li>Internal:</li>
      <ol>
        <li>Defining a method (proc) inside the collection class to take a single-parameter 
            code block and execute it for each element.</li>
        <li>Advantage: simplicity and code clarity - no need to ask if a call to the 
            next item has been done yet.  Also, Ruby has many pre-defined internal 
            iterators that are extremely useful.</li>
        <li>Here's an example for an array (even though the array in Ruby already contains iterators, this is to exemplify):</li>
        <ol>
          def for_each_element(array)<br />
          &nbsp;&nbsp;i = 0<br />
          &nbsp;&nbsp;while i < array.length<br />
          &nbsp;&nbsp;&nbsp;&nbsp;yield(array[i])<br />
          &nbsp;&nbsp;&nbsp;&nbsp;i += 1<br />
          &nbsp;&nbsp;end<br />
          end<br />
        </ol>
        <li>Example use:  pass in the code block (between curly braces) so that yield can execute it for each element:</li>
        <ol>
          a = [10, 20, 30]<br />
          for_each_element(a) {|element| puts("The element is #{element}")}<br />
        </ol>
        <li>Of course, the Ruby array iterator "each" serves this purpose already but this example highlights how this is accomplished.</li>
      </ol>
    </ol>
    <li>Ruby Enumerator Module:</li>
    <ol>
      <li>A mixin way to easily add an iterator to your class.</li>
      <li>To mix in Enumerable, you need only make sure that your internal iterator 
          method is named each and that the individual elements that you are going 
          to iterate over have a reasonable implementation of the <=> comparison operator.</li>
      <li>Example:</li>
      <ol>
        class Account<br />
        &nbsp;&nbsp;attr_accessor :name, :balance<br />
        &nbsp;&nbsp;def initialize(name, balance)<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@name = name<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@balance = balance<br />
        &nbsp;&nbsp;end<br />
        &nbsp;&nbsp;def <=>(other)<br />
        &nbsp;&nbsp;&nbsp;&nbsp;balance <=> other.balance<br />
        &nbsp;&nbsp;end<br />
        end<br />
        class Portfolio<br />
        &nbsp;&nbsp;include Enumerable<br />
        &nbsp;&nbsp;def initialize<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@accounts = []<br />
        &nbsp;&nbsp;end<br />
        &nbsp;&nbsp;def each(&block)<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@accounts.each(&block)<br />
        &nbsp;&nbsp;end<br />
        &nbsp;&nbsp;def add_account(account)<br />
        &nbsp;&nbsp;&nbsp;&nbsp;@accounts << account<br />
        &nbsp;&nbsp;end<br />
        end<br />
      </ol>
      <li>This can be used in many ways, including:</li>
      <ol>
        my_portfolio.each {|account| puts("#{account.name} has a balance of #{account.balance}")}<br />
        my_portfolio.any? {|account| account.balance > 2000}<br />
        my_portfolio.all? {|account| account.balance > = 10}<br />
      </ol>
    </ol>
    <li>Other cool Ruby internal iterators:</li>
    <ol>
      <li><b>scan</b> method in the string class:  Takes a regular expression and iterates
          over each match that is found in the string.
      <li><b>each_line</b> method in the string class:  Iterates over each line of the string.</li>
      <li><b>each_byte</b> method in the string class:  Iterates over each byte of the string.</li>
      <li><b>each_key</b> method of the hash class:  Iterates over each key.</li>
      <li><b>each_value</b> method of the hash class:  Iterates over each value.</li>
      <li><b>each_filename</b> method of the pathname class:  Iterates over each component (folders and file) of the path.</li>
      <li><b>each_entry</b> method of the pathname class:  Iterates over the contents of the directory indicated by the path.</li>
      <li><b>each_object</b> method of the ObjectSpace class:  Iterates over each object in Ruby - very powerful.</li>
      <li><b>each_object([class or module])</b> method of the ObjectSpace class:  An optional version of the above iterator 
          that will only show the instances of the passed module or class.</li>
      <ol>
        <li>Example printing all the numbers known to ruby (like pi, e, speed of light, etc):</li>
        <ol>
          ObjectSpace.each_object(Numeric) {|n| puts("The number is #{n}")}<br />
        </ol>
      </ol>
    </ol>
  </ol>
</ol>
