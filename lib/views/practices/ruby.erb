
<h3>Ruby Dev</h3>  
<p>
<ol>
  <li>Setups</li>
  <ol>
    <li>Development</li>
    <ol>
      <li>Ubuntu 10.10 on VMWare Workstation</li>
      <li>CrunchBang! 11 on VirtualBox</li>
    </ol>
    <li>Production</li>
    <ol>
      <li>Ruby Newbie blog</li>
      <ol>
        <li>Website hosted on Heroku, repository in Github</li>
        <li>Website address: http://floating-beach-3762@heroku.com</li>
      </ol>
    </ol>
  </ol>
  <li>Blog</li>
  <ol>
    <li>About:</li>
    <ol>
      <li>Started as a public Ruby discovery blog and may end that way</li>
      <li>Currently: A personal development diary style blog</li>
      <li>Publicly viewable but not currently found on Google</li>
    </ol>
    <li>Visual layout</li>
    <ol>
      <li>Free online css template.  I liked the simple 3 zone style with infinite content area.</li>
    </ol>
    <li>Framework</li>
    <ol>
      <li>Sinatra (on Rack)</li>
    </ol>
    <li>HTML templates</li>
    <ol>
      <li>ERB (Embedded Ruby Code)</li>
    </ol>
    
  </ol>
  <li>Tutorials</li>
  <ol>
    <li>Ruby on Rails Tutorial: Learning Rails by Example (by Michael Hartl)</li>
    <center>*abbreviated notes only (use <a href="http://ruby.railstutorial.org/chapters/a-demo-app#fig:mvc_detailed">link</a> for full tutorial)</center>
    <ol>
      <li><a href="/practices/ruby_rortut_1_first_app">1.0 First App</a></li>
      <ol>
        <li>Book Convention (1.13)</li>
        <ol>
          <li>When using rvm, no need for sudo</li>
          <li>Rails root refers to app root directory NOT root directory for Rails itself</li>
        </ol>
        <li>Software Versions (1.22)</li>
        <ol>
          <li>Use exactly the same versions used in the tutorial - proven to work together</li>
          <ol>
            <li>Only exception: Ruby 1.9.2 and 1.9.3 are interchangeable</li>
          </ol>
          <li>Install</li>
          <ol>
            <li>For OpenSSL error use: $ rvm install 1.9.3 --with-openssl-dir=$rvm_path/usr</li>
          </ol>
          <li>Gemset</li>
          <ol>
            <li>rails3tutorial2ndEd</li>
          </ol>
          <li>Freeze rubygems version</li>
          <ol>
            <li>$ gem update --system 1.8.24</li>
          </ol>  
          <li>Get Linux libraries (libs)</li>   
          <ol>
            <li>$ sudo apt-get install libxslt-dev libxml2-dev libsqlite-dev</li>
          </ol>  
        </ol>
        <li>First Rails App (1.3)</li>
        <table>
          <tr class="table-head">
            <td class="table-head" colspan=2 align="center"><b>Rails App Dir Default Structure</b></td>
          </tr>
          <tr>
            <td><b>app/</b></td>
            <td>Core application code, including models, views, controllers and helpers</td>
          </tr>
          <tr>
            <td><b>app/assets</b></td>
            <td>App's assets (such as css, javascript and images)</td>
          </tr>
          <tr>
            <td><b>config/</b></td>
            <td>App configuration</td>
          </tr>
          <tr>
            <td><b>db/</b></td>
            <td>Database files</td>
          </tr>
          <tr>
            <td><b>doc/</b></td>
            <td>Documentation for the app</td>
          </tr>
          <tr>
            <td><b>lib/</b></td>
            <td>Library modules</td>
          </tr>
          <tr>
            <td><b>lib/assets</b></td>
            <td>Library assets (such as css, javascript and images)</td>
          </tr>
          <tr>
            <td><b>log/</b></td>
            <td>App log files</td>
          </tr>
          <tr>
            <td><b>public/</b></td>
            <td>Data accessible to the public (eg: web browsers) (such as error pages)</td>
          </tr>
          <tr>
            <td><b>script/rails</b></td>
            <td>A script for generating code, opening console sessions or starting a local server</td>
          </tr>
          <tr>
            <td><b>test/</b></td>
            <td>App tests -> made OBSOLETE by <b>spec/</b> directory</td>
          </tr>
          <tr>
            <td><b>tmp/</b></td>
            <td>Temporary files</td>
          </tr>
          <tr>
            <td><b>vendor/</b></td>
            <td>3rd party code (such as plugins and gems)</td>
          </tr>
          <tr>
            <td><b>vendor/assets</b></td>
            <td>3rd party assets (such as css, javascript and images)</td>
          </tr>
          <tr>
            <td><b>README.rdoc</b></td>
            <td>A brief description of the app</td>
          </tr>
          <tr>
            <td><b>Rakefile</b></td>
            <td>Utility tasks available via the rake command</td>
          </tr>
          <tr>
            <td><b>Gemfile</b></td>
            <td>Gem requirements for this app</td>
          </tr>
          <tr>
            <td><b>Gemfile.lock</b></td>
            <td>A list of gems used to ensure all copies of the app use the same gem versions</td>
          </tr>
          <tr>
            <td><b>config.ru</b></td>
            <td>A configuration file for Rack middleware</td>
          </tr>
          <tr>
            <td><b>.gitignore</b></td>
            <td>Patterns for files that should be ignored by Git</td>
          </tr>
        </table>
        <br />
        <li>Bundler (1.2.4)</li>
        <ol>
          <li>Modify Gemfile to be version specific</li>
          <ol>
            <li>...otherwise, when building, new versions will be fetched & could break the build</li>
          </ol>
        </ol>
        <li>Rails Server (1.2.5)</li>
        <ol>
          <li>Installed nodejs to get around the "ExecJS not found" problem</li>
        </ol>
        <li>Setup first_app (1.3.1)</li>
        <ol>
          <li>git init, then set .gitignore</li>
          <li>git add . && git commit</li>
          <li>to see the status: git status</li>
          <li>to see commit log: git log</li>
          <li>branch, then replace README.rdoc with README.md</li>
        </ol>
        <li>Deploy (1.4)</li>
        <ol>
          <li>Options:</li>
          <ol>
            <li>shared host or VPS running Phusion Passenger (module for apache & Nginx)</li>
            <li>Full-serve: Engine Yard, Rails Machine</li>
            <li>Cloud: Engine Yard Cloud, Heroku</li>
          </ol>
        </ol>
      </ol>
      <li><a href="/practices/ruby_rortut_2_demo_app">2.0 Demo App</a></li>
      <ol>
        <li>Modeling demo users (2.1.1)</li>
        <ol>
          <table>
            <tr class="table-head">
              <td class="table-head" colspan=2 align="center"><b>Users</b></td>
            </tr>
            <tr>
              <td>id</td>
              <td>integer</td>
            </tr>
            <tr>
              <td>name</td>
              <td>string</td>
            </tr>
            <tr>
              <td>email</td>
              <td>string</td>
            </tr>
          </table>
        </ol>
        <li>Modeling demo microposts (2.1.2)</li>
        <ol>
          <table>
            <tr class="table-head">
              <td class="table-head" colspan=2 align="center"><b>microposts</b></td>
            </tr>
            <tr>
              <td>id</td>
              <td>integer</td>
            </tr>
            <tr>
              <td>content</td>
              <td>string</td>
            </tr>
            <tr>
              <td>user_id</td>
              <td>integer</td>
            </tr>
          </table>
        </ol>
        <li>The Users resource</li>
        <ol>
          <li>generate scaffold</li>
          <li>rake</li>
          <ol>
            <li>ruby version of the Unix "make" to compile</li>
            <li>to view db options, run $ bundle exec rake -T db</li>
            <li>to view all options, run $ bundle exec rake -T</li>
          </ol>
          <li>localhost:3000/users to see what scaffold does for users model</li>
          <li>add new users</li>
        </ol>
        <li>URI - Action relation</li>
        <table>
            <tr>
              <td><center><b>URI</b></center></td>
              <td><center><b>Action</b></center></td>
              <td><center><b>Purpose</b></center></td>
            </tr>
            <tr>
              <td>/users</td>
              <td>index</td>
              <td>page to list all users</td>
            </tr>
            <tr>
              <td>/users/1</td>
              <td>show</td>
              <td>page to show user with id 1</td>
            </tr>
            <tr>
              <td>/users/new</td>
              <td>new</td>
              <td>page to make a new user</td>
            </tr>
            <tr>
              <td>/users/1/edit</td>
              <td>edit</td>
              <td>page to edit user with id 1</td>
            </tr>
        </table>
        <li>MVC (Model View Controller) diagram for Users</li>
        <img src="../images/ruby/railstut_ch2_mvc_detailed_users.png" alt="Rails MVC 404 image" style="border: 0px solid #ccc;" />
        <center>RoR Tutorial Chapter 2 - MVC diagram for the Users model (<a href="http://ruby.railstutorial.org/chapters/a-demo-app#fig:mvc_detailed">link</a>)</center>
        <br />
        <ol>
          <ol>
            <li>The <span style="color:orange;"><b>browser</b></span> issues a request for the <span style="color:limegreen;">/users URI</span>.</li>
            <li>Rails <span style="color:orange;"><b>routes</b></span> /users to the index action in the Users <span style="color:orange;"><b>controller</b></span>.</li>
            <li>The index action asks the User <span style="color:orange;"><b>model</b></span> to </li>
            <li>Retrieve all users (<span style="color:limegreen;">User.all</span>).</li>
            <li>The User model returns the list of users to the <span style="color:orange;"><b>controller</b></span>.</li>
            <li>The controller captures the users in the <span style="color:limegreen;">@users</span> variable, which is passed to the index <span style="color:orange;"><b>view</b></span>.</li>
            <li>The view uses embedded Ruby to <span style="color:orange;"><b>render</b></span> the page as HTML.</li>
            <li>The <span style="color:orange;"><b>controller</b></span> passes the HTML back to the <span style="color:orange;"><b>browser</b></span>.</li>
          </ol>
        </ol>
        <li>Rails <span style="color:orange;"><b>routes</b></span>, with a rule for the Users resource (2.2)</li>
        <ol>
          <li><span style="color:limegreen;">config/routes.rb</span></li>
          DemoApp::Application.routes.draw do<br />&nbsp;&nbsp;
            resources :users<br />
          end
        </ol>
        <li><span style="color:orange;"><b>Users controller</b></span> in schematic form (2.3)</li>
        <ol>
          <li><span style="color:limegreen;">app/controllers/users_controller.rb</span></li>
          class UsersController < ApplicationController<br />&nbsp;&nbsp;

          def index<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br /><br />&nbsp;&nbsp;

          def show<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ...<br />&nbsp;&nbsp;
          end<br /><br />&nbsp;&nbsp;

          def new<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br /><br />&nbsp;&nbsp;

          def edit<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br /><br />&nbsp;&nbsp;

          def create<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br /><br />&nbsp;&nbsp;

          def update<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br /><br />&nbsp;&nbsp;

          def destroy<br />&nbsp;&nbsp;&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br />
          end<br />
          <li>Note the <b><span style="color:orange;">class</span> UsersController < ApplicationController</b></li>
          <ol>
            <li>Shows that UsersController class <i>inherits</i> from class ApplicationController</li>
          </ol>
          <li>REST architecture - relation between <b>User controller</b> and <b>HTTP Requests</b></li>
          <table>
            <tr>
              <td><b>HTTP Request</b></td>
              <td><b>URI</b></td>
              <td><b>Action</b></td>
              <td><b>Purpose</b></td>
            </tr>
            <tr>
              <td>GET</td>
              <td>/users</td>
              <td><span style="color:limegreen;"><b>index</b></span></td>
              <td>page to list all users</td>
            </tr>
            <tr>
              <td>GET</td>
              <td>/users/1</td>
              <td><span style="color:limegreen;"><b>show</b></span></td>
              <td>page to show user with id 1</td>
            </tr>
            <tr>
              <td>GET</td>
              <td>/users/new</td>
              <td><span style="color:limegreen;"><b>new</b></span></td>
              <td>page to make a new user</td>
            </tr>
            <tr>
              <td>POST</td>
              <td>/users</td>
              <td><span style="color:limegreen;"><b>create</b></span></td>
              <td>create a new user</td>
            </tr>
            <tr>
              <td>GET</td>
              <td>/users/1/edit</td>
              <td><span style="color:limegreen;"><b>edit</b></span></td>
              <td>page to edit user with id 1</td>
            </tr>
            <tr>
              <td>PUT</td>
              <td>/users/1</td>
              <td><span style="color:limegreen;"><b>update</b></span></td>
              <td>update user with id 1</td>
            </tr>
            <tr>
              <td>DELETE</td>
              <td>/users/1</td>
              <td><span style="color:limegreen;"><b>destroy</b></span></td>
              <td>delete user with id 1</td>
            </tr>
          </table><br />
          <li>REST: REpresentational State Transfer</li>
          <ol>
            <li>As it applies to RAILS</li>
            <ol>
              <li>means that most application components (such as users and microposts) are <u>modeled as resources</u> that can be created, read, updated, and deleted.  Applies to:</li>
              <ol>
                <li>CRUD db operations (Create, Read, Update and Delete)</li>
                <li>HTTP Request methods (POST, GET, PUT, and DELETE)</li>
              </ol>
            </ol>
          </ol>
        </ol>
        <li>A Simplified User <b>index</b> action (2.4)</li>
        <ol>
          <li><span style="color:limegreen;">app/controllers/users_controller.rb</span></li>
          class UsersController < ApplicationController<br />&nbsp;&nbsp;

          def index<br />&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="background-color:darkblue;">@users = User.all</span><br />&nbsp;&nbsp;
            ... <br />&nbsp;&nbsp;
          end<br />&nbsp;&nbsp;
            ... <br />
          end<br />
          <li><b>@users = User.all</b></li>
          <ol>
            <li>asks the User model to retrieve a list of all the users from the database</li>
            <ol>
              <li><b>User</b> class is defined in app/models/user.rb and inherits from ActiveRecord::Base</li>
            </ol>
            <li>then places them in the variable <b>@users</b></li>
          </ol>
        </ol>
        <li>User model for demo_app (2.5)</li>
        <ol>
          <li><span style="color:limegreen;">app/models/user.rb</span></li>
          class User < ActiveRecord::Base<br />&nbsp;&nbsp;
            attr_accessible :email, :name<br />
          end<br />
          <li>Using attr_accessible here is new to Rails 3.2.3</li>
          <li>By default, all model attributes are accessible</li>
          <li>using attr_accessible :email, :name makes it so ONLY email and name are accessible</li>
          <li>this closes up a potential security risk, such as issuing a put request and setting a variable that a user should not be able to set</li>
        </ol>
        <li>View for the user index (2.6)</li>
        <ol>
          <li>since @users is an instance variable, it is available to the view</li>
          <li>index.html.erb has the code to iterate over @users</li>
          <li><span style="color:limegreen;">app/views/users/index.html.erb</span></li>
          &lt;h1>Listing users&lt;/h1><br /><br />

          &lt;table><br />&nbsp;&nbsp;
            &lt;tr><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;th>Name&lt;/th><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;th>Email&lt;/th><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;th>&lt;/th><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;th>&lt;/th><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;th>&lt;/th><br />&nbsp;&nbsp;
            &lt;/tr><br /><br />

          <span style="background-color:darkblue;">&lt;% @users.each do |user| %></span><br />&nbsp;&nbsp;
            &lt;tr><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;td>&lt;%= user.name %>&lt;/td><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;td>&lt;%= user.email %>&lt;/td><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;td>&lt;%= link_to 'Show', user %>&lt;/td><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;td>&lt;%= link_to 'Edit', edit_user_path(user) %>&lt;/td><br />&nbsp;&nbsp;&nbsp;&nbsp;
              &lt;td>&lt;%= link_to 'Destroy', user, confirm: 'Are you sure?', method: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :delete %>&lt;/td><br />&nbsp;&nbsp;
            &lt;/tr><br />
          &lt;% end %><br />
          &lt;/table><br />

          &lt;br /><br />

          &lt;%= link_to 'New User', new_user_path %><br />
        </ol>
        <li>Weaknesses of this User resource (2.2.3)</li>
        <ol>
          <li>No data validations</li>
          <li>No authentication</li>
          <li>No tests</li>
          <li>No layout</li>
          <li>No real understanding</li>
        </ol>
        <li>The Microsposts resource (2.3)</li>
        <ol>
          <li>generate scaffold</li>
          <li>rake</li>
        </ol>
        <li>Microposts now have same setup as Users but with fields id, content and user_id</li>
        <li>Enforcing the <i>micro</i> (2.3.2)</li>
        <ol>
          <li>Add a length validation</li>
          <ol>
            <li><span style="color:limegreen;">app/models/micropost.rb</span></li>
            class Micropost < ActiveRecord::Base<br />&nbsp;&nbsp;
              attr_accessible :content, :user_id<br />&nbsp;&nbsp;
              <span style="background-color:darkblue;">validates :content, :length => {:maximum => 140}</span><br />
            end<br />
          </ol>
        </ol>
        <li>One-to-Many: A user has_many microposts (2.3.3)</li>
        <ol>
          <li>Creating this relationship is a 2-step process:</li>
          <ol>
            <li><span style="color:limegreen;">app/models/user.rb</span></li>
            class User < ActiveRecord::Base<br />&nbsp;&nbsp;
              attr_accessible :email, :name<br />&nbsp;&nbsp;
              <span style="background-color:darkblue;">has_many :microposts</span><br />
            end<br />
            <li><span style="color:limegreen;">app/models/micropost.rb</span></li>
            class Micropost < ActiveRecord::Base<br />&nbsp;&nbsp;
              attr_accessible :content, :user_id<br />&nbsp;&nbsp;
              
              <span style="background-color:darkblue;">belongs_to :user</span><br />&nbsp;&nbsp;
              
              validates :content, :length => {:maximum => 140}<br />
            end<br/>
          </ol>
          <li>Now, Rails (using Active Record) can infer the microposts associated with each user</li>
          <li><b>Rails console</b> to verify</li>
          <ol>
            <li>command $ rails console</li>
            <li>Loading development environment (Rails 3.2.3)<br />1.9.3p194 :001 ></li>
            <li>create variable and set to first user:  $ first_user = User.first</li>
            <li>get first user's microposts: $ first_user.microposts</li>
            <li>Note: to see output, go to <a href="/practices/ruby_rortut_2_demo_app">console documentation</a> for demo_app</li>
          </ol>
        </ol>
        <li>Inheritance Hierarchies (2.3.4)</li>
        <ol>
          <li>Demo model inheritance diagram:</li>
          <img src="../images/ruby/railstut_ch2_demo_model_inheritance.png" alt="Rails MVC 404 image" style="border: 0px solid #ccc;" />
          <br /><br /><br />
          <li>Demo controller inheritence diagram:</li>
          <img src="../images/ruby/railstut_ch2_demo_controller_inheritance.png" alt="Rails MVC 404 image" style="border: 0px solid #ccc;" />
          <ol>
            <li>UsersController inheritance</li>
            <ol>
              <li><span style="color:limegreen;">app/controllers/users_controller.rb</span></li>
              class UsersController < ApplicationController<br />&nbsp;&nbsp;
                ...<br />
              end<br />
            </ol>
            <li>MicropostsController inheritance</li>
            <ol>
              <li><span style="color:limegreen;">app/controllers/microposts_controller.rb</span></li>
              class MicropostsController < ApplicationController<br />&nbsp;&nbsp;
                ...<br />
              end<br />
            </ol>
            <li>ApplicationController inheritance</li>
            <ol>
              <li><span style="color:limegreen;">app/controllers/application_controller.rb</span></li>
              class ApplicationController < ActionController::Base<br />&nbsp;&nbsp;
                ...<br />
              end<br />
              <li>By inheriting ultimately from ActionController::Base both the Users and Microposts controllers gain a large amount of functionality, such as :</li>
              <ol>
                <li>the ability to manipulate model objects, </li>
                <li>filter inbound HTTP requests, and </li>
                <li>render views as HTML</li>
              </ol>
            </ol>
          </ol>
        </ol>
        <li>Deploying Demo App (2.3.5)</li>
        <ol>
          <li>$ git add . && git commit -m "Finish demo app"</li>
          <li>$ git push</li>
          <li>$ heroku create --stack cedar</li>
          <li>$ git push heroku master</li>
          <li>$ heroku run rake db:migrate</li>
        </ol>
        <li>Demo App Conclusion (2.4)</li>
        <ol>
          <li>Strengths</li>
          <ol>
            <li>High-level overview of Rails</li>
            <li>Introduction to MVC</li>
            <li>First taste of the REST architecture</li>
            <li>Beginning data modeling</li>
            <li>A live, database-backed web application in production</li>
          </ol>
          <li>Weaknesses</li>
          <ol>
            <li>No custom layout or styling</li>
            <li>No static pages (like “Home” or “About”)</li>
            <li>No user passwords</li>
            <li>No user images</li>
            <li>No signing in</li>
            <li>No security</li>
            <li>No automatic user/micropost association</li>
            <li>No notion of “following” or “followed”</li>
            <li>No micropost feed</li>
            <li>No test-driven development</li>
            <li>No real understanding</li>
          </ol>
        </ol>
      </ol>
      <li><a href="/practices/ruby_rortut_3_sample_app">3.0 Sample App</a></li>
      <ol>
        <li>Follows similar processes to setup as before, more gems added in gemfile</li>
        <li>Generate - Rails script to generate controllers</li>
        <ol>
          <li>$ rails generate controller StaticPages home help --no-test-framework</li>
          <ol>
            <li>controller name: StaticPages</li>
            <li>--no-test-framework: to suppress automatic RSpec tests, will create them manually</li>
            <li>home and help pages and routes created</li>
            <li>helpers created for controller StaticPages</li>
          </ol>
        </ol>
        <li>How to Undo things</li>
        <ol>
          <li>Examples:</li>
          <ol>
            <li>To undo $ rails generate controller FooBars baz quux : $ Rails destroy controller FooBars baz quux</li>
            <li>To undo $ rails generate model Foo bar:string baz:integer : $ rails destroy model Foo</li>
            <li>To undo a single-step db migrate: $ rake db:rollback</li>
            <li>To undo all db steps and remake: $ rake db:migrate VERSION=0</li>
          </ol>
        </ol>
        <li>Rails config/routes.rb</li>
        <ol>
          <li>Similar to the main rb file for Sinatra (like blog.rb)</li>
        </ol>
        <li>StaticPages controller does NOT use REST</li>
        <ol>
          <li>This is normal for a collection of static pages</li>
          <li>REST is not the best solution in all cases.</li>
          <li>This controller was created by the rails generate command:</li>
          <li><span style="color:limegreen;">app/controllers/static_pages_controller.rb</span></li>
          <span style="color:orange;">class</span> StaticPagesController <span style="color:yellow;"><</span> ApplicationController<br />&nbsp;&nbsp;
            <span style="color:orange;">def</span> home<br />&nbsp;&nbsp;
            <span style="color:orange;">end</span><br /><br />&nbsp;&nbsp;

            <span style="color:orange;">def</span> help<br />&nbsp;&nbsp;
            <span style="color:orange;">end</span><br />
          <span style="color:orange;">end</span><br />
          <li>In ruby, the two functions home and help would do nothing.</li>
          <li>With Rails, the inheritance from ApplicationController gives a lot of functionality</li>
          <ol>
            <li>Steps executed when URI static_pages/home is used (same idea for help as well):</li>
            <ol>
              <li>Open StaticPages controller</li>
              <li>Execute home action (the def home in the controller page)</li>
              <li>Render the corresponding home view</li>
            </ol>
          </ol>
        </ol>
        <li>First tests</li>
        <ol>
          <li>BDD (Behaviour-Driven Development)</li>
          <ol>
            <li>Emphasizes behaviour of an application rather than its precise implementation</li>
            <li>BDD is a variant of TDD (Test-Driven Development)</li>
            <li>Methodology used by tutorial</li>
            <li>Integration tests and Unit tests are the main tools used for this in tutorial</li>
            <ol>
              <li>Integration tests</li>
              <ol>
                <li>known as Request Specs in RSpec</li>
                <li>allows the simulation of a user interacting with sample_app through a web browser</li>
                <li>used with Capybara or Cucumber to provide natural-language syntax provides a powerful method to test the application without having to manually check each page with a web browser.</li>
              
              </ol>
              <li>Unit tests</li>
            </ol>
            <li>Write tests first!</li>
            <ol>
              <li>Write a failing test before any code</li>
            
            </ol>
            <li>the fail-implement-pass development cycle induces a flow state, leading to enjoyable coding and high productivity</li>
            <li>Skipping TDD: when coding just to get an idea of what may work -> refered to as a Spike in EXtreme Programming</li>
          </ol>
          <li>Generate integration tests</li>
          <ol>
            <li>$ rails generate integration_test static_pages</li>
            <li>Edit generated <span style="color:limegreen;">spec/requests/static_pages_spec.rb</span> to:</li>
                require 'spec_helper'<br />

                describe "StaticPages" do<br />&nbsp;&nbsp;

                  describe "Home page" do<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  
                    it "should have the content 'Sample App'" do<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      visit '/static_pages/home'<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      page.should have_content('Sample App')<br />&nbsp;&nbsp;&nbsp;&nbsp;
                    end<br />&nbsp;&nbsp;
                  end<br />
                end<br />
            <li>Home page describe block:</li>
            <ol>
              <li>It <string> do : The string is ignored by RSpec but makes the test easier to follow for user</li>
              <li>visit '/static_pages/home': This is the action to be tested </li>
              <li>page.should have_content('Sample App'): States that the result of the action should contain the words "Sample App"</li>
            </ol>
            <li>Test Home page</li>
            <ol>
              <li>Expectation: fail (since the default home page text has not been altered)</li>
              <li>$ bundle exec rspec spec/requests/static_pages_spec.rb</li>
              <li>Result: <span style="color:red;">F</span> ... 1 example, 1 failure</li>
              <li>Edit <span style="color:limegreen;">app/views/static_pages/help.html.erb</span></li>
              <li>Re-run: $ bundle exec rspec spec/requests/static_pages_spec.rb</li>
              <li>Result: <span style="color:limegreen;">.</span> ... 1 example, 0 failures</li>
              <li>Notice that the <span style="color:red;">red</span> "F" turned into a <span style="color:limegreen;">green</span> "."</li>
            </ol>
            <li>Edit spec and add describe block for "Help page" - should have content 'Help'</li>
            <li>Run tests</li>
            <ol>
              <li>$ bundle exec rspec spec/requests/static_pages_spec.rb</li>
              <li>Result: <span style="color:limegreen;">.</span><span style="color:red;">F</span> ... 2 examples, 1 failure</li>
            </ol>
            <li>Edit help page and rerun tests - success</li>
          </ol>
          <li>Add new static page: About</li>
          <ol>
            <li>Add to test spec first: <span style="color:limegreen;">spec/requests/static_pages_spec.rb</span></li>
                describe "About page" do<br />&nbsp;&nbsp;&nbsp;&nbsp;
                
                  it "should have the content 'About'" do<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    visit '/static_pages/about'<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    page.should have_content('About')<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  end<br />&nbsp;&nbsp;
                end<br />
            <li>Run tests: $ bundle exec rspec spec/requests/static_pages_spec.rb</li>
            <li>Result: <span style="color:limegreen;">..</span><span style="color:red;">F</span> ... No route matches [GET] "/static_pages/about" ... 3 examples, 1 failure ...</li>
            <li>Edit <span style="color:limegreen;">config/routes.rb</span> to add GET "static_pages/about"</li>
            <li>Re-test</li>
            <li>Result: <span style="color:limegreen;">..</span><span style="color:red;">F</span> ... The action 'about' could not be found for StaticPagesController ... 3 examples, 1 failure ...</li>
            <li>Edit <span style="color:limegreen;">app/controllers/static_pages_controller.rb</span> to add <span style="color:orange;">def</span> about <span style="color:orange;">end</span></li>
            <li>Re-test</li>
            <li>Result: <span style="color:limegreen;">..</span><span style="color:red;">F</span> ... ActionView::MissingTemplate ... 3 examples, 1 failure ...</li>
            <li>Add view file: <span style="color:limegreen;">app/views/static_pages/about.html.erb</span></li>
            <li>Re-test</li>
            <li>Result: <span style="color:limegreen;">...</span> ...</li>
            <li>Successfully added about page!</li>
          </ol>
        </ol>
        <li>Slightly dynamic pages (3.3)</li>
        <ol>
          <li>Create a new layout file</li>
          <ol>
            <li>Replace tests in <span style="color:limegreen;">spec/requests/static_pages_spec.rb</span></li>
            ...<br />
              describe "Home page" do<br />&nbsp;&nbsp;

                it "should have the h1 'Sample App'" do<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  visit '/static_pages/home'<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  page.should have_selector('h1', :text => 'Sample App')<br />&nbsp;&nbsp;
                end<br />&nbsp;&nbsp;

                it "should have the title 'Home'" do<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  visit '/static_pages/home'<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  page.should have_selector('title',<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    :text => "Ruby on Rails Tutorial Sample App | Home")<br />&nbsp;&nbsp;
                end<br />
              end<br />
              ... (repeat for help and about)...<br />
            <li>Update text in home, about and help erb pages found in <span style="color:limegreen;">app/views/static_pages/</span></li>
            <li>Embedded Ruby (3.3.3)</li>
            <ol>
              <li>Now to redo what has just been done (and follow the DRY [Don't Repeat Yourself] principle)</li>
              <li>Rails function: provide</li>
              <ol>
                <li>Change <span style="color:limegreen;">app/views/static_pages/home.html.erb</span></li>
                    <span style="background-color:darkblue;">&lt;% provide(:title, 'Home') %></span><br />
                    &lt;!DOCTYPE html><br />
                    &lt;html><br />&nbsp;&nbsp;
                      &lt;head><br />&nbsp;&nbsp;&nbsp;&nbsp;
                        &lt;title>Ruby on Rails Tutorial Sample App | <span style="background-color:darkblue;">&lt;%= yield(:title) %></span>&lt;/title><br />&nbsp;&nbsp;
                      &lt;/head><br />&nbsp;&nbsp;
                      &lt;body><br />&nbsp;&nbsp;&nbsp;&nbsp;
                        &lt;h1>Sample App&lt;/h1><br />&nbsp;&nbsp;&nbsp;&nbsp;
                        &lt;p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          This is the home page for the<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          &lt;a href="http://railstutorial.org/">Ruby on Rails Tutorial&lt;/a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                          sample application.<br />&nbsp;&nbsp;&nbsp;&nbsp;
                        &lt;/p><br />&nbsp;&nbsp;
                      &lt;/body><br />
                    &lt;/html><br />
                <li>Using the provide at the top allows for an incremental, testable way of introducing code</li>
                <li>This page is still not taking input from outside but the code INSIDE the html is in-place to do so</li>\
                <li></li>
              </ol>
            </ol>
            <li>The layout file changed from rails generated default</li>
            <ol>
              <li><span style="color:limegreen;">app/views/layouts/application.html.erb</span> was:</li>
                  &lt;!DOCTYPE html><br />
                  &lt;html><br />
                  &lt;head><br />&nbsp;&nbsp;
                    &lt;title>SampleApp&lt;/title><br />&nbsp;&nbsp;
                    &lt;%= stylesheet_link_tag    "application", :media => "all" %><br />&nbsp;&nbsp;
                    &lt;%= javascript_include_tag "application" %><br />&nbsp;&nbsp;
                    &lt;%= csrf_meta_tags %><br />
                  &lt;/head><br />
                  &lt;body><br />

                  &lt;%= yield %><br />

                  &lt;/body><br />
                  &lt;/html><br />
              <li>change to:</li>
                  &lt;!DOCTYPE html><br />
                  &lt;html><br />
                  &lt;head><br />&nbsp;&nbsp;
                    <span style="background-color:darkblue;">&lttitle>Ruby on Rails Tutorial Sample App | &lt;%= yield(:title) %>&lt;/title></span><br />&nbsp;&nbsp;
                    &lt;%= stylesheet_link_tag    "application", :media => "all" %><br />&nbsp;&nbsp;
                    &lt;%= javascript_include_tag "application" %><br />&nbsp;&nbsp;
                    &lt;%= csrf_meta_tags %><br />
                  &lt;/head><br />
                  &lt;body><br />

                  &lt;%= yield %><br />

                  &lt;/body><br />
                  &lt;/html><br />
            </ol>
            <li>Now, since the layout file is active again (was removed earlier), only the body and the provide code needs to be present on each page</li>
            <li>Let's take the About page as an example (<span style="color:limegreen;">app/views/static_pages/home.html.erb</span>):</li>
              &lt;% provide(:title, 'About Us') %><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;

                  &lt;h1>About Us&lt;/h1><br />&nbsp;&nbsp;&nbsp;&nbsp;
                  &lt;p><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    The &lt;a href="http://railstutorial.org/">Ruby on Rails Tutorial&lt;/a><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    is a project to make a book and screencasts to teach web development<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    with &lt;a href="http://rubyonrails.org/">Ruby on Rails&lt;/a>. This<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    is the sample application for the tutorial.<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  &lt;/p><br />

          </ol>
        </ol>
        <li>Excercises (3.5)</li>
        <ol>
          <li>Add Contact page</li>
          <ol>
            <li>Copy describe block for other pages in <span style="color:limegreen;">spec/requests/static_pages_spec.rb</span> for other pages and alter for contact page.</li>
            <li>Run tests</li>
            <li>Add route to <span style="color:limegreen;">config/routes.rb</span></li>
            <li>copy another page to modify for contact: <br />
            $ cp app/views/static_pages/help.html.erb app/views/static_pages/contact.html.erb</li>
            <li>modify page</li>
            <li>run tests</li>
            <li>push changes when tests succeed</li>
          </ol>
          <li>Use RSpec function <span style="color:orange;">let</span> and string interpolation to alter test code</li>
          <ol>
            <li>Since every title test has the same base info: "Ruby on Rails Tutorial Sample App", replace in <span style="color:limegreen;">spec/requests/static_pages_spec.rb</span></li>
            <li>For example, the Help page title test changes from:</li>
                it "should have the title 'Home'" do<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  visit '/static_pages/home'<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  page.should have_selector('title',<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    :text => "Ruby on Rails Tutorial Sample App | Home")<br />&nbsp;&nbsp;
                end<br />
            <li>To:</li>
                it "should have the title 'Home'" do<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  visit '/static_pages/home'<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  page.should have_selector('title',<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                    :text => "#{base_title} | Home")<br />&nbsp;&nbsp;
                end<br />
            <li>Then add the RSpec let line of code just inside the main StaticPages describe block:</li>
            let(:base_title) { "Ruby on Rails Tutorial Sample App" }<br />
          </ol>
          <li>Skipped setting up Postgre as local db, not required for tutorial</li>
        </ol>
        <li>Eliminated need for calling bundle exec by using binstubs</li>
        <li>Setup Guard</li>
        <li>Setup Spork</li>
        <li>Ran tests</li>
      </ol>
      <li>4.0 Rails-Flavored-Ruby</li>
      <ol>
        <li>Strings</li>
        <ol>
          <li>Difference between single-quote strings and double-quote strings:</li>
          <ol>
            <li>Single-quote strings are truly literal</li>
              '\n' = "\\n" : in double-quote string, backslash had to be escaped<br />
            <li>Ruby won’t interpolate into single-quoted strings</li>
          </ol>
        </ol>
        <li>Objects</li>
        <ol>
          <li>What do objects do?  Respond to messages.</li>
          <ol>
            <li>"foobar".length -> 6 : String object responds to message "length"</li>
            <li>"foobar".empty? -> false : "?" at the end is ruby convention for the return value is a boolean.</li>
          </ol>
        </ol>
        <li>Arrays and Hashes</li>
        <ol>
          <li>Hash notation shortcut ruby 1.9 +</li>
          hash1 = { :first_name => "Bob", :last_name => "Builder" }
          hash2 = { first_name: "Bob", last_name: "Builder }
          <li>hash1 == hash2 -> :<symbol> => is replaced by <symbol>:</li>
          <li>Side note: the => is called a hash rocket</li>
        </ol>
        <li>Inspect</li>
        <ol>
          <li>Return a string of the literal representation of the object</li>
          puts :name.inspect -> :name  <br />
          puts "It worked!".inspect -> "It worked!"<br />
          <li>whereas</li>
          puts :name -> name<br />
          puts "It worked!" -> It worked!<br />
          <li>Good for getting variable names</li>
          <li>Shortcut for puts &lt;object>.inspect : p &lt;object></li>
          eg:  p :name -> :name<br />
        </ol>
        <li>Putting in the invisible brackets -> Aha!  I get it!</li>
        <ol>
          <li>example from layout:</li>
          &lt;%= stylesheet_link_tag "application", :media => "all" %>
          <li>Function call parentheses are optional in ruby, so the above is like:</li>
          &lt;%= stylesheet_link_tag("application", :media => "all") %>
          <li>If a hash is the last parameter of a function call, then curly braces are optional.  So the above is like:</li>
          &lt;%= stylesheet_link_tag("application", { :media => "all" }) %>
          <li>Suddenly, it is clear!  As previously mentioned, for ruby 1.9 + it could also be written as:</li>
          &lt;%= stylesheet_link_tag "application", media: "all" %>
        </ol>
        <li>Classes</li>
        <ol>
          <li>superclass to find out inheritance structure</li>
          s = String.new("foobar") -> "foobar"<br />
          s.class -> String<br />
          s.class.superclass -> Object<br />
          s.class.superclass.superclass -> BasicObject<br />
          s.class.superclass.superclass.superclass -> nil<br />
        </ol>
      </ol>
      <li><a href="/practices/ruby_rortut_5_filling_in_the_layout">5.0 Filling in the Layout</a></li>
      <li><a href="/practices/ruby_rortut_6_modeling_users">6.0 Modeling Users</a></li>
      <ol>
        <li>Database Migrations (6.1.1)</li>
        <ol>
          <li>Models are singular by convention.  Unlike when generating the Users controller, the command to generate the model uses User:</li>
          <li>$ rails generate model User name:string email:string</li>
          Result:<br />&nbsp;&nbsp;
          <b>invoke</b>  active_record<br />&nbsp;&nbsp;
          <span style="color:limegreen;">create</span>&nbsp;&nbsp;&nbsp;&nbsp;db/migrate/20120611023745_create_users.rb<br />&nbsp;&nbsp;
          <span style="color:limegreen;">create</span>&nbsp;&nbsp;&nbsp;&nbsp;app/models/user.rb<br />&nbsp;&nbsp;
          <b>invoke</b>&nbsp;&nbsp;&nbsp;&nbsp;rspec<br />&nbsp;&nbsp;
          <span style="color:limegreen;">create</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spec/models/user_spec.rb<br />
          <ol>
            <li>Active Record is the Rails model&lt;->db code</li>
            <li>Migration: how database is altered.  This timestamp prefaced code has the code to envoke a create_table db script.</li>
            <ol>
              <li>Here's what <span style="color:limegreen;">db/migrate/20120611023745_create_users.rb</span> looks like:</li>
              <span style="color:orange;">class</span> CreateUsers <span style="color:yellow;"><</span> ActiveRecord<span style="color:yellow;">::</span>Migration<br />&nbsp;&nbsp;
                <span style="color:orange;">def</span> change<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  create_table <span style="color:blue;">:users</span> <span style="color:orange;">do</span> <span style="color:yellow;">|</span> t <span style="color:yellow;">|</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    t.string <span style="color:blue;">:name</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    t.string <span style="color:blue;">:email</span><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    t.timestamps<br />&nbsp;&nbsp;&nbsp;&nbsp;
                  <span style="color:orange;">end</span><br />&nbsp;&nbsp;
                <span style="color:orange;">end</span><br />
              <span style="color:orange;">end</span><br />
              <li>A timestamp is used in the filename since db changes are chained together and order is important.  Not to be confused with the <i>t.timestamps</i> in the create_table which will generate <i>created_at</i> and <i>updated_at</i> fields in the table.</li>
              <li>The magic behind active record allows us to undo changes at anytime:</li>
              <ol>
                <li>Undo: $ rake db:rollback</li>
                <li>Redo: $ rake db:migrate</li>
                <li>The change method knows that the reverse of create_table is drop_table</li>
              </ol>
            </ol>
          </ol>
          <li>Generated users table for the User model:</li>
          <img src="../images/ruby/railstut_ch6_user_model_initial.png" alt="Rails User Model 404 image" style="border: 0px solid #ccc;" />
          <br /><br /><br />
          <li>To view the db itself, open <span style="color:limegreen;">db/development.sqlite3</span> with the <a href="http://sourceforge.net/projects/sqlitebrowser/">SQLite Database Browser</a></li>
        </ol>
        <li>The model file (6.1.2)</li>
      </ol>
      <li><a href="/practices/ruby_rortut_7_sign_up">7.0 Sign-Up</a></li>
      <li><a href="/practices/ruby_rortut_8_sign_in_out">8.0 Sign-In Sign-Out</a></li>
      <li><a href="/practices/ruby_rortut_9_updating_showing_and_deleting_users">9.0 Upddating, showing and deleting users</a></li>
      <li><a href="/practices/ruby_rortut_10_user_microposts">10.0 User Microposts</a></li>
    </ol>
  </ol>
  <li>Development</li>
  <ol>
    <li></li>
  </ol>
</ol>

